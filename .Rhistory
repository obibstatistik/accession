shiny::runApp('Shiny/Accession')
shiny::runApp('Shiny/Accession')
runApp('Shiny/Accession')
View(postno)
runApp('Shiny/Accession')
shiny::runApp('Shiny/Accession')
shiny::runApp('Shiny/Accession')
shiny::runApp('Shiny/Accession')
runApp('Shiny/Accession')
runApp('Shiny/Accession')
runApp('Shiny/Accession')
R -e "shiny::runApp('Shiny/Accession')"
runApp('Shiny/Accession')
shiny::runApp('Shiny/Accession')
shiny::runApp('Shiny/shiny-frontpage')
runApp('Shiny')
shiny::runApp('Shiny')
install.packages(foreach)
install.packages("foreach"")
install.packages("foreach")
install.packages("foreach")
runApp('Shiny')
foreach(n = 1:5) %dopar% max.eig(n, 1)
library("foreach", lib.loc="~/R/win-library/3.3")
foreach(n = 1:5) %dopar% max.eig(n, 1)
runApp('Shiny')
vignette("foreach")
x <- foreach(i=1:3) %do% sqrt(i)
x
runApp('Shiny')
runApp('Shiny')
runApp('Shiny/cb')
runApp('Shiny')
install.packages(shinyjs)
install.packages("shinyjs")
library("shinyjs", lib.loc="~/R/win-library/3.3")
shiny::runApp('frontpage')
runApp('frontpage')
runApp('frontpage')
knitr::opts_chunk$set(echo = TRUE)
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
shinyAppDir(
system.file("examples/06_tabsets", package = "shiny"),
options = list(
width = "100%", height = 550
)
)
runApp('Shiny/imusic')
runApp('Shiny/imusic')
runApp('Shiny/imusic')
runApp('Shiny/imusic')
runApp('Shiny/imusic')
runApp('Shiny/imusic')
